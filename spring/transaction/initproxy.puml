@startuml
participant "spring生命周期" as spring
participant "SpringAOP" as aop
participant "AopUtils" as AopUtils
participant "BeanFactoryTransactionAttributeSourceAdvisor" as transactionAdvisor
participant "ProxyFactory" as factory
==初始化==
autonumber
activate spring
spring->aop:触发创建bena后的回调BeanPostProcessor.applyBeanPostProcessorsAfterInitialization
deactivate spring
activate aop
aop->aop:InfrastructureAdvisorAutoProxyCreator.postProcessAfterInitialization 获得被代理对象
aop->aop: findCandidateAdvisors获取所有advisors 针对事务是BeanFactoryTransactionAttributeSourceAdvisor
aop->AopUtils:AopUtils.findAdvisorsThatCanApply(candidateAdvisors, beanClass)过滤出能满足条件的Advisors
deactivate
activate AopUtils
AopUtils->transactionAdvisor:判断Advisor是否实现了 PointcutAdvisor\n如果实现了通过 接口方法getPointcut()
AopUtils->AopUtils:调用pointcut.getClassFilter().matches(targetClass) 判断当前类是否支持aop
AopUtils->AopUtils:调用pointcut.getMethodMatcher()==TrueMethodMatcher.INSTANCE 表示所有方法都支持代理
AopUtils->AopUtils:调用反射类的mehtod调用循环methodMatcher.matches(method, targetClass))\n匹配过程中会将事务配置通过TransactionAttribute缓存起来\n没有则缓存空并返回不被代理
activate aop
AopUtils->aop:返回符合条件的Advisor
aop->aop:对Advisor进行排序
aop->factory:调用createProxy传入advisor和bean执行代理
deactivate
activate factory
factory->factory:创建ProxyFactory实例
factory->factory:设置ProxyFactory的TargetSource
factory->factory:设置ProxyFactory的Advisors
factory->factory:调用ProxyFactory.getProxy开始生成代理
alt createAopProxy获取对应的代理类工厂
factory->factory:判断走JdkDynamicAopProxy还是Cglib动态代理(默认都是cglib)\nif (targetClass.isInterface() || Proxy.isProxyClass(targetClass) || ClassUtils.isLambdaClass(targetClass)) {
factory->factory:JdkDynamicAopProxy具体代理实现InvocationHandler\nCglibAopProxy
end
deactivate factory
@enduml
